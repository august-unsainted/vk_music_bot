from aiogram import Router, F
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InlineQueryResultAudio
from aiogram.filters import CommandStart
from vkpymusic import Service
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from vkpymusic import Playlist

service = Service.parse_config()

router = Router()


# def get_playlists_kb(playlists: list[Playlist]) -> InlineKeyboardMarkup:
#     keyboard = []
#     for playlist in playlists:
#         text = f'{playlist.title} ‚Äî {playlist.description}'
#         data = f'{song.owner_id}_{song.track_id}'
#         keyboard.append([InlineKeyboardButton(text=text, callback_data=data)])
#     keyboard.append([InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='back'),
#                      InlineKeyboardButton(text='1/?', callback_data='back'),
#                      InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='forward'),])
#     return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(CommandStart())
async def search(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üéµ\n\n'
                         '–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –∏–∑ –í–ö –≤ –¥–≤–∞ –∫–ª–∏–∫–∞! –ü—Ä–æ—Å—Ç–æ:\n'
                         '1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –º–æ–π –Ω–∏–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @vk_inline_music_bot\n'
                         '2Ô∏è‚É£ –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n'
                         '3Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n'
                         '–ù—É–∂–Ω—ã–π —Ç—Ä–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π! üîçüé∂\n'
                         '–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üòä')


@router.inline_query(F.query == '')
async def none_query(query: InlineQuery):
    songs = service.get_popular(count=15)
    results = []
    for song in songs:
        results.append(InlineQueryResultAudio(
            id=song.track_id, audio_url=song.url, title=song.title, performer=song.artist, audio_duration=song.duration,
        ))
    await query.answer(results=results)


@router.inline_query()
async def get_song(query: InlineQuery):
    songs = service.search_songs_by_text(query.query, count=30)
    results = []
    if songs:
        for song in songs:
            results.append(InlineQueryResultAudio(
                id=song.track_id, audio_url=song.url, title=song.title, performer=song.artist, audio_duration=song.duration,
            ))
    else:
        results.append(
            InlineQueryResultArticle(
                type='article', id='404', title='–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üò®', description='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'
            )
        )
    await query.answer(results=results, is_personal=False)
